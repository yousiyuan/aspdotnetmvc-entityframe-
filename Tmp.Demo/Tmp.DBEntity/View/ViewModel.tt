<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)Manager.ttinclude"  #>
<#@ include file="$(ProjectDir)ConfigHelper.ttinclude"  #>

<#
    string dbconn = ReadConnectionStrings("IOTConnStr");
    string dbname= ReadAppSettings("DbDatabase");
	string projname = ReadAppSettings("nameSpace");
	
	var manager = Manager.Create(this.Host, GenerationEnvironment);
    manager.StartHeader();
 #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//       生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by 诸葛冷冷
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;

namespace <#=projname#>
{
<#
	manager.EndBlock();
	foreach(ViewStruckInfo view in DbHelper.GetViewDescStruct(dbconn, dbname)){
		string viewname = view.name.Replace(" ", "_");
		List<ViewPkIdentityInfo> constlist = DbHelper.GetConstraintField(dbconn,dbname,view.name);
		
		manager.StartNewFile(viewname + ".cs");
 #>
	[Table("<#=view.name#>")]
	[Serializable]
    public class <#=viewname#> : BaseEntity
	{
<#		foreach(ViewFieldsInfo fields in DbHelper.GetViewFieldsList(dbconn,dbname,view.name )){
			int AmountPK = constlist.Where(t=>t.IsPrimaryKey).Count();
			bool isPK = constlist.Where(t=>t.ColumnName == fields.ColumnsName && t.IsPrimaryKey).Count() >= 1;
			int AmountIdentity = constlist.Where(t=>t.ColumnName == fields.ColumnsName && t.IsIdentity).Count();
			if(AmountIdentity > 0){
				if(isPK && AmountPK <= 1){ #>
		[Key]
<#				} else if(isPK && AmountPK >= 2){ #>
		//复合主键需要在OnModelCreating中手动定义
<#				} #>
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
<#			} else {
				if(isPK && AmountPK <= 1){ #>
		[Key]
<#				} else if(isPK && AmountPK >= 2){ #>
		//复合主键需要在OnModelCreating中手动定义
<#				} #>
		[Column("<#=fields.ColumnsName#>")]
<#				if(fields.CSharpType == "string"){ #>
		[StringLength(<#=fields.ColumnsLength#>, ErrorMessage = "{0}不能超过<#=fields.ColumnsLength#>个字符")]
<#				}
				if(!fields.IsNull){ #>
		[Required(ErrorMessage = "{0}不能为空")]
<#				} #>
		[Display(Name = "字段中文名称，实际使用时，需改")]
<#			} #>
		public <#=fields.CSharpType#><#=fields.CommonType.IsValueType && fields.IsNull?"?":""#> <#=fields.ColumnsName#> { get; set; }

<#		}
		PopIndent();
 #>
	}
<#
		manager.EndBlock();
	}
	manager.StartFooter();
 #>
}
<#
    manager.EndBlock();
    manager.Process(true);
 #>