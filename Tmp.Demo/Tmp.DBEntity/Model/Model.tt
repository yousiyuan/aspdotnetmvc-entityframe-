<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)Manager.ttinclude"  #>
<#@ include file="$(ProjectDir)ConfigHelper.ttinclude"  #>

<#
    string dbconn = ReadConnectionStrings("IOTConnStr");
    string dbname= ReadAppSettings("DbDatabase");
    string projname = ReadAppSettings("nameSpace");
    string dtPrefix = ReadAppSettings("dtPrefix");

    var manager = Manager.Create(this.Host, GenerationEnvironment);
    manager.StartHeader();
 #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//       生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by 诸葛冷冷
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using Tmp.Common.Tools.Helper;

namespace <#=projname#>
{
<#  manager.EndBlock();
    foreach(DbTable tab in DbHelper.GetDbTables(dbconn,dbname)){
        string className = tab.TableName;//.Replace(dtPrefix, "");
        manager.StartNewFile(className + ".cs");

		int amountPK = 0;
#>
    [Table("<#=tab.TableName #>")]
    [Serializable]
    public class <#=className #> : BaseEntity
    {
<#
        PushIndent("        ");
        foreach(DbColumn col in DbHelper.GetDbColumns(dbconn,dbname, tab.TableName)){
#>

<#
    if(col.IsIdentity){
#>
<#if(col.IsPrimaryKey&&tab.AmountPK<=1){#>
[Key]
<#}else{#>
//复合主键需要另外声明
<# } #>
[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
<#
    } else {
#>
<#if(col.IsPrimaryKey&&tab.AmountPK<=1){#>
[Key]
<#}else if(col.IsPrimaryKey&&tab.AmountPK>=2){#>
//复合主键需要另外声明
<#}#>
[Column("<#=col.ColumnName#>")]
<#
        if(col.CSharpType == "string"){
 #>
[StringLength(<#=col.CharLength#>, ErrorMessage = "{0}不能超过<#=col.CharLength#>个字符")]
<#
        }
#>
<#
        if(!col.IsNullable){
#>
[Required(ErrorMessage = "{0}不能为空")]
<#
        }
#>
[Display(Name = "字段中文名称，实际使用时，需改")]
<#
    }
#>
public <#=col.CSharpType#><#if(col.CommonType.IsValueType && col.IsNullable){#>?<#}#> <#=col.ColumnName#> { get; set; }
<#
        }
        PopIndent();
#>

        /// <summary>
        /// 属性浅拷贝
        /// </summary>
        /// <returns></returns>
        public <#= className #> Clone()
        {
            return ObjectCopier.Clone<<#= className #>>(this);
        }
    }
<#
        manager.EndBlock();
    }
        manager.StartFooter();
#>
}
<#
    manager.EndBlock();
    manager.Process(true);
 #>